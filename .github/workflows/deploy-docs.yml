name: Deploy Docs

on:
  workflow_dispatch:

  release:
    types:
      - published

permissions:
  id-token: write
  contents: read

jobs:
  check-deploy-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if release is from main branch
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          BRANCH=$(jq -r .release.target_commitish "$GITHUB_EVENT_PATH")
          if [ "$BRANCH" != "main" ]; then
            echo "Releases should only be created from the main branch. This release is from $BRANCH."
            exit 1
          fi

      - name: Check if dispatch is from development/main branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH" != "development" ] && [ "$BRANCH" != "main" ]; then
            echo "Deploy should only be created from the development or main branch. This deploy is from $BRANCH."
            exit 1
          fi

  deploy-docs:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    needs: check-deploy-branch
    name: Deploy Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: ./.github/actions/setup-node

      - name: Cache npm dependencies
        uses: ./.github/actions/cache

      - name: Install dependencies
        run: npm install

      - name: Get package.json version
        id: package_version
        run: |
          package_version=$(jq -r '.version' < package.json)
          echo "Version in package.json: $package_version"
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Set timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date +%s)
          PACKAGE_ID=${{ env.PACKAGE_VERSION }}-${TIMESTAMP}
          echo "PACKAGE_ID=$PACKAGE_ID" >> $GITHUB_ENV

      - name: Create .env file in docs dir
        run: |
          echo "VITE_PACKAGE_ID=${{ env.PACKAGE_ID }}" > docs/.env
          cat docs/.env
          ls -la docs
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }}

      - name: Build docs
        run: npm run docs:build
        env:
          VITE_PACKAGE_ID: ${{ env.PACKAGE_ID }}

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/.vitepress/dist
          retention-days: 30

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_DEPLOY_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get AWS caller Identity
        run: aws sts get-caller-identity

      - name: Copy files to dist directory and zip
        run: |
          mkdir -p dist
          cp -r docs/.vitepress/dist/* dist/
          cp package.json dist/package.json

      - name: Copy dist directory to S3 Bucket in versioned folder using package.json version and timestamp
        run: |
          aws s3 cp dist s3://${{ vars.AWS_S3_BUCKET }}/docs/${{ env.PACKAGE_ID }}/ --recursive

      - name: Retrieve current CloudFront distribution config
        id: get-config
        run: |
          aws cloudfront get-distribution-config --id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} > dist-config.json

      - name: Extract distribution config and etag
        id: extract-config
        run: |
          # Extract etag and config
          etag=$(jq -r '.ETag' dist-config.json)
          jq '.DistributionConfig' dist-config.json > distribution-config.json
          echo "ETAG=$etag" >> $GITHUB_ENV

      - name: Modify CloudFront config with new OriginPath
        run: |
          jq '.Origins.Items[0].OriginPath = "/docs/${{ env.PACKAGE_ID }}"' distribution-config.json > new-distribution-config.json

      - name: Update CloudFront distribution
        run: |
          aws cloudfront update-distribution --id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --distribution-config file://new-distribution-config.json \
            --if-match ${{ env.ETAG }}

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --paths "/*" --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}